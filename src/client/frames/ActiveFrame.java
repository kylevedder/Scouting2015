/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.frames;

import client.objects.activedata.ActiveData;
import client.objects.activedata.FeedLocation;
import client.objects.activedata.RobotNumWheels;
import client.objects.activedata.RobotShape;
import client.objects.activedata.RobotWheelType;
import client.objects.activedata.TotePickupOrientation;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import main.Main;
import client.objects.matchdata.CoOpType;
import client.objects.matchdata.HumanPlayerType;
import client.objects.matchdata.MatchData;
import client.objects.matchdata.RobotActivityType;
import client.objects.stacks.StackBase;
import client.objects.stacks.StackContainer;
import client.objects.stacks.StackTote;
import utils.Utils;

/**
 *
 * @author kyle
 */
public class ActiveFrame extends javax.swing.JFrame implements ResetableFrame
{

    private static final int SCROLL_SPEED = 16;

    /**
     * Creates new form MatchFrame
     */
    public ActiveFrame()
    {
        initComponents();
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
            this.setLocationRelativeTo(null);
            this.pack();
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(ActiveFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            Logger.getLogger(ActiveFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            Logger.getLogger(ActiveFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (UnsupportedLookAndFeelException ex)
        {
            Logger.getLogger(ActiveFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(true);
    }

    /**
     * Resets the frame to its default values
     */
    @Override
    public void resetFrame()
    {        
        fieldScouter.setText("");
        fieldTeamNum.setText("");
        buttonGroupCoop.clearSelection();
        buttonGroupHumanPlayer.clearSelection();
        textAreaRobotConfigComments.setText("");
        spinnerNumContainers.setValue(0);
        spinnerNumTotes.setValue(0);
        checkBoxInAutoZone.setSelected(false);
        checkBoxTotesStacked.setEnabled(false);
        checkBoxTotesStacked.setSelected(false);
        checkBoxHPThrewNoodles.setSelected(false);
        radioHPExcellent.setEnabled(false);
        radioHPMediocre.setEnabled(false);
        radioHPPoor.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroupCoop = new javax.swing.ButtonGroup();
        buttonGroupHumanPlayer = new javax.swing.ButtonGroup();
        mainPanelScroll = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        buttonSave = new javax.swing.JButton();
        panelTeamInfo = new javax.swing.JPanel();
        labelTeamNum = new javax.swing.JLabel();
        fieldTeamNum = new javax.swing.JTextField();
        labelScouter = new javax.swing.JLabel();
        fieldScouter = new javax.swing.JTextField();
        panelRobotConfig = new javax.swing.JPanel();
        panelRobotShape = new javax.swing.JPanel();
        comboBoxRobotShape = new javax.swing.JComboBox();
        panelRobotActivityComments = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaRobotConfigComments = new javax.swing.JTextArea();
        panelRobotDriveTrain = new javax.swing.JPanel();
        comboBoxRobotDriveTrain = new javax.swing.JComboBox();
        panelRobotWheelType = new javax.swing.JPanel();
        comboBoxRobotWheelType = new javax.swing.JComboBox();
        panelScoring = new javax.swing.JPanel();
        panelAutonomous = new javax.swing.JPanel();
        panelAutoScoredTotes = new javax.swing.JPanel();
        labelNumTotes = new javax.swing.JLabel();
        spinnerNumTotes = new javax.swing.JSpinner();
        checkBoxTotesStacked = new javax.swing.JCheckBox();
        panelAutoScoredContainer = new javax.swing.JPanel();
        labelNumContainers = new javax.swing.JLabel();
        spinnerNumContainers = new javax.swing.JSpinner();
        panelAutoScoredRobot = new javax.swing.JPanel();
        checkBoxInAutoZone = new javax.swing.JCheckBox();
        panelTeleop = new javax.swing.JPanel();
        panelTeleopLitter = new javax.swing.JPanel();
        checkBoxTeleopLitterPushLitter = new javax.swing.JCheckBox();
        checkBoxTeleopLitterPickupLitter = new javax.swing.JCheckBox();
        panelTeleopTotes = new javax.swing.JPanel();
        labelTeleopTotesMaxHeight = new javax.swing.JLabel();
        spinnerMaxNumTotes = new javax.swing.JSpinner();
        checkBoxTeleopTotesCanPickup = new javax.swing.JCheckBox();
        comboBoxTeleopTotePickupOrientation = new javax.swing.JComboBox();
        labelPickupOrintation = new javax.swing.JLabel();
        labelFeedLocation = new javax.swing.JLabel();
        comboBoxTeleopToteFeedLocation = new javax.swing.JComboBox();
        panelTeleopContainer = new javax.swing.JPanel();
        checkBoxTeleopContainersPickup = new javax.swing.JCheckBox();
        checkBoxTeleopContainersUpright = new javax.swing.JCheckBox();
        spinnerMaxHeightContainer = new javax.swing.JSpinner();
        labelTeleopContainersMaxHeight = new javax.swing.JLabel();
        panelCoop = new javax.swing.JPanel();
        radioCoopNone = new javax.swing.JRadioButton();
        radioCoopUnstacked = new javax.swing.JRadioButton();
        radioCoopStacked = new javax.swing.JRadioButton();
        spinnerMaxCoopStack = new javax.swing.JSpinner();
        labeCoopMaxStackHeight = new javax.swing.JLabel();
        panelHumanPlayer = new javax.swing.JPanel();
        radioHPPoor = new javax.swing.JRadioButton();
        radioHPMediocre = new javax.swing.JRadioButton();
        radioHPExcellent = new javax.swing.JRadioButton();
        checkBoxHPThrewNoodles = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Match Recorder");
        setResizable(false);

        mainPanelScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        labelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelTitle.setText("Active Recorder");

        buttonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/SaveIconMedium.png"))); // NOI18N
        buttonSave.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonSave.setMaximumSize(new java.awt.Dimension(55, 55));
        buttonSave.setMinimumSize(new java.awt.Dimension(55, 55));
        buttonSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonSaveActionPerformed(evt);
            }
        });

        panelTeamInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Team Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        labelTeamNum.setText("Team #:");

        fieldTeamNum.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                fieldTeamNumKeyReleased(evt);
            }
        });

        labelScouter.setText("Scouter:");

        javax.swing.GroupLayout panelTeamInfoLayout = new javax.swing.GroupLayout(panelTeamInfo);
        panelTeamInfo.setLayout(panelTeamInfoLayout);
        panelTeamInfoLayout.setHorizontalGroup(
            panelTeamInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTeamInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTeamNum)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldTeamNum, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelScouter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldScouter, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTeamInfoLayout.setVerticalGroup(
            panelTeamInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelTeamInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(fieldTeamNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(labelTeamNum)
                .addComponent(labelScouter)
                .addComponent(fieldScouter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelRobotConfig.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Robot Configuration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        panelRobotShape.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Robot Shape", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        comboBoxRobotShape.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Wide", "Long", "Square", "Round", "Hex", "Triangle", "Other" }));

        javax.swing.GroupLayout panelRobotShapeLayout = new javax.swing.GroupLayout(panelRobotShape);
        panelRobotShape.setLayout(panelRobotShapeLayout);
        panelRobotShapeLayout.setHorizontalGroup(
            panelRobotShapeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(comboBoxRobotShape, 0, 420, Short.MAX_VALUE)
        );
        panelRobotShapeLayout.setVerticalGroup(
            panelRobotShapeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRobotShapeLayout.createSequentialGroup()
                .addComponent(comboBoxRobotShape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelRobotActivityComments.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Comments (Optional)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        textAreaRobotConfigComments.setColumns(20);
        textAreaRobotConfigComments.setRows(1);
        jScrollPane1.setViewportView(textAreaRobotConfigComments);

        javax.swing.GroupLayout panelRobotActivityCommentsLayout = new javax.swing.GroupLayout(panelRobotActivityComments);
        panelRobotActivityComments.setLayout(panelRobotActivityCommentsLayout);
        panelRobotActivityCommentsLayout.setHorizontalGroup(
            panelRobotActivityCommentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        panelRobotActivityCommentsLayout.setVerticalGroup(
            panelRobotActivityCommentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        panelRobotDriveTrain.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Robot Drive Train", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        comboBoxRobotDriveTrain.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "4 Wheel", "6 Wheel", "8 Wheel" }));

        javax.swing.GroupLayout panelRobotDriveTrainLayout = new javax.swing.GroupLayout(panelRobotDriveTrain);
        panelRobotDriveTrain.setLayout(panelRobotDriveTrainLayout);
        panelRobotDriveTrainLayout.setHorizontalGroup(
            panelRobotDriveTrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(comboBoxRobotDriveTrain, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelRobotDriveTrainLayout.setVerticalGroup(
            panelRobotDriveTrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRobotDriveTrainLayout.createSequentialGroup()
                .addComponent(comboBoxRobotDriveTrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelRobotWheelType.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Robot Wheel Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        comboBoxRobotWheelType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Standard", "Omni", "Mecanum", "Swerve", "Pnumatic", "Custom" }));

        javax.swing.GroupLayout panelRobotWheelTypeLayout = new javax.swing.GroupLayout(panelRobotWheelType);
        panelRobotWheelType.setLayout(panelRobotWheelTypeLayout);
        panelRobotWheelTypeLayout.setHorizontalGroup(
            panelRobotWheelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(comboBoxRobotWheelType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelRobotWheelTypeLayout.setVerticalGroup(
            panelRobotWheelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRobotWheelTypeLayout.createSequentialGroup()
                .addComponent(comboBoxRobotWheelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelRobotConfigLayout = new javax.swing.GroupLayout(panelRobotConfig);
        panelRobotConfig.setLayout(panelRobotConfigLayout);
        panelRobotConfigLayout.setHorizontalGroup(
            panelRobotConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRobotConfigLayout.createSequentialGroup()
                .addGroup(panelRobotConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelRobotDriveTrain, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRobotShape, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRobotConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelRobotActivityComments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRobotWheelType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panelRobotConfigLayout.setVerticalGroup(
            panelRobotConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRobotConfigLayout.createSequentialGroup()
                .addGroup(panelRobotConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelRobotActivityComments, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRobotShape, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelRobotConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelRobotDriveTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelRobotWheelType, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelScoring.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Scoring", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        panelAutonomous.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Autonomous", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        panelAutoScoredTotes.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Scored Totes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        labelNumTotes.setText("Scored Totes:");

        spinnerNumTotes.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinnerNumTotesStateChanged(evt);
            }
        });
        spinnerNumTotes.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                spinnerNumTotesPropertyChange(evt);
            }
        });

        checkBoxTotesStacked.setText("Totes Stacked?");
        checkBoxTotesStacked.setEnabled(false);

        javax.swing.GroupLayout panelAutoScoredTotesLayout = new javax.swing.GroupLayout(panelAutoScoredTotes);
        panelAutoScoredTotes.setLayout(panelAutoScoredTotesLayout);
        panelAutoScoredTotesLayout.setHorizontalGroup(
            panelAutoScoredTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutoScoredTotesLayout.createSequentialGroup()
                .addGroup(panelAutoScoredTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAutoScoredTotesLayout.createSequentialGroup()
                        .addComponent(labelNumTotes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerNumTotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(checkBoxTotesStacked))
                .addGap(0, 78, Short.MAX_VALUE))
        );
        panelAutoScoredTotesLayout.setVerticalGroup(
            panelAutoScoredTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutoScoredTotesLayout.createSequentialGroup()
                .addGroup(panelAutoScoredTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNumTotes)
                    .addComponent(spinnerNumTotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxTotesStacked)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelAutoScoredContainer.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Scored Containers", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        labelNumContainers.setText("Scored Containers:");

        spinnerNumContainers.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinnerNumContainersStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelAutoScoredContainerLayout = new javax.swing.GroupLayout(panelAutoScoredContainer);
        panelAutoScoredContainer.setLayout(panelAutoScoredContainerLayout);
        panelAutoScoredContainerLayout.setHorizontalGroup(
            panelAutoScoredContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutoScoredContainerLayout.createSequentialGroup()
                .addComponent(labelNumContainers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerNumContainers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 53, Short.MAX_VALUE))
        );
        panelAutoScoredContainerLayout.setVerticalGroup(
            panelAutoScoredContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutoScoredContainerLayout.createSequentialGroup()
                .addGroup(panelAutoScoredContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNumContainers)
                    .addComponent(spinnerNumContainers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelAutoScoredRobot.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Scored Robot", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        checkBoxInAutoZone.setText("In Auto Zone?");

        javax.swing.GroupLayout panelAutoScoredRobotLayout = new javax.swing.GroupLayout(panelAutoScoredRobot);
        panelAutoScoredRobot.setLayout(panelAutoScoredRobotLayout);
        panelAutoScoredRobotLayout.setHorizontalGroup(
            panelAutoScoredRobotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutoScoredRobotLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkBoxInAutoZone)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelAutoScoredRobotLayout.setVerticalGroup(
            panelAutoScoredRobotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutoScoredRobotLayout.createSequentialGroup()
                .addComponent(checkBoxInAutoZone)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelAutonomousLayout = new javax.swing.GroupLayout(panelAutonomous);
        panelAutonomous.setLayout(panelAutonomousLayout);
        panelAutonomousLayout.setHorizontalGroup(
            panelAutonomousLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutonomousLayout.createSequentialGroup()
                .addComponent(panelAutoScoredTotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAutoScoredContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelAutoScoredRobot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelAutonomousLayout.setVerticalGroup(
            panelAutonomousLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelAutoScoredTotes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelAutoScoredContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelAutoScoredRobot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panelTeleop.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Teleoperated", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        panelTeleopLitter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Litter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        checkBoxTeleopLitterPushLitter.setText("Can Push Litter?");

        checkBoxTeleopLitterPickupLitter.setText("Can Pick Up Litter?");

        javax.swing.GroupLayout panelTeleopLitterLayout = new javax.swing.GroupLayout(panelTeleopLitter);
        panelTeleopLitter.setLayout(panelTeleopLitterLayout);
        panelTeleopLitterLayout.setHorizontalGroup(
            panelTeleopLitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTeleopLitterLayout.createSequentialGroup()
                .addGroup(panelTeleopLitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkBoxTeleopLitterPickupLitter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkBoxTeleopLitterPushLitter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelTeleopLitterLayout.setVerticalGroup(
            panelTeleopLitterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTeleopLitterLayout.createSequentialGroup()
                .addComponent(checkBoxTeleopLitterPushLitter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxTeleopLitterPickupLitter)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelTeleopTotes.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Totes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        labelTeleopTotesMaxHeight.setText("Max Stack Height:");

        spinnerMaxNumTotes.setEnabled(false);
        spinnerMaxNumTotes.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinnerMaxNumTotesStateChanged(evt);
            }
        });
        spinnerMaxNumTotes.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                spinnerMaxNumTotesPropertyChange(evt);
            }
        });

        checkBoxTeleopTotesCanPickup.setText("Can Pick Up Totes?");
        checkBoxTeleopTotesCanPickup.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkBoxTeleopTotesCanPickupActionPerformed(evt);
            }
        });

        comboBoxTeleopTotePickupOrientation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Large", "Small", "Both" }));
        comboBoxTeleopTotePickupOrientation.setEnabled(false);

        labelPickupOrintation.setText("Pickup Orientation:");

        labelFeedLocation.setText("Feed Location:");

        comboBoxTeleopToteFeedLocation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HP Station", "Landfill", "Both" }));
        comboBoxTeleopToteFeedLocation.setEnabled(false);

        javax.swing.GroupLayout panelTeleopTotesLayout = new javax.swing.GroupLayout(panelTeleopTotes);
        panelTeleopTotes.setLayout(panelTeleopTotesLayout);
        panelTeleopTotesLayout.setHorizontalGroup(
            panelTeleopTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelTeleopTotesMaxHeight)
            .addComponent(checkBoxTeleopTotesCanPickup)
            .addGroup(panelTeleopTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelTeleopTotesLayout.createSequentialGroup()
                    .addComponent(labelPickupOrintation)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(comboBoxTeleopTotePickupOrientation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelTeleopTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spinnerMaxNumTotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelTeleopTotesLayout.createSequentialGroup()
                        .addComponent(labelFeedLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxTeleopToteFeedLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        panelTeleopTotesLayout.setVerticalGroup(
            panelTeleopTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTeleopTotesLayout.createSequentialGroup()
                .addComponent(checkBoxTeleopTotesCanPickup)
                .addGap(1, 1, 1)
                .addGroup(panelTeleopTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPickupOrintation)
                    .addComponent(comboBoxTeleopTotePickupOrientation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTeleopTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTeleopTotesMaxHeight)
                    .addComponent(spinnerMaxNumTotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTeleopTotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFeedLocation)
                    .addComponent(comboBoxTeleopToteFeedLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 50, Short.MAX_VALUE))
        );

        panelTeleopContainer.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Containers", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        checkBoxTeleopContainersPickup.setText("Can Pick Up Containers?");
        checkBoxTeleopContainersPickup.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkBoxTeleopContainersPickupActionPerformed(evt);
            }
        });

        checkBoxTeleopContainersUpright.setText("Must To Be Upright?");
        checkBoxTeleopContainersUpright.setEnabled(false);

        spinnerMaxHeightContainer.setEnabled(false);
        spinnerMaxHeightContainer.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinnerMaxHeightContainerStateChanged(evt);
            }
        });
        spinnerMaxHeightContainer.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                spinnerMaxHeightContainerPropertyChange(evt);
            }
        });

        labelTeleopContainersMaxHeight.setText("Max Capable Stack Height:");

        javax.swing.GroupLayout panelTeleopContainerLayout = new javax.swing.GroupLayout(panelTeleopContainer);
        panelTeleopContainer.setLayout(panelTeleopContainerLayout);
        panelTeleopContainerLayout.setHorizontalGroup(
            panelTeleopContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(checkBoxTeleopContainersPickup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelTeleopContainerLayout.createSequentialGroup()
                .addComponent(labelTeleopContainersMaxHeight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerMaxHeightContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(panelTeleopContainerLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(checkBoxTeleopContainersUpright, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTeleopContainerLayout.setVerticalGroup(
            panelTeleopContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTeleopContainerLayout.createSequentialGroup()
                .addComponent(checkBoxTeleopContainersPickup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBoxTeleopContainersUpright)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTeleopContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTeleopContainersMaxHeight)
                    .addComponent(spinnerMaxHeightContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelTeleopLayout = new javax.swing.GroupLayout(panelTeleop);
        panelTeleop.setLayout(panelTeleopLayout);
        panelTeleopLayout.setHorizontalGroup(
            panelTeleopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTeleopLayout.createSequentialGroup()
                .addComponent(panelTeleopTotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTeleopContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTeleopLitter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTeleopLayout.setVerticalGroup(
            panelTeleopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTeleopTotes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelTeleopLitter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelTeleopContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelScoringLayout = new javax.swing.GroupLayout(panelScoring);
        panelScoring.setLayout(panelScoringLayout);
        panelScoringLayout.setHorizontalGroup(
            panelScoringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelAutonomous, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelTeleop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelScoringLayout.setVerticalGroup(
            panelScoringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelScoringLayout.createSequentialGroup()
                .addComponent(panelAutonomous, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTeleop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelCoop.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Coop", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        buttonGroupCoop.add(radioCoopNone);
        radioCoopNone.setText("None");

        buttonGroupCoop.add(radioCoopUnstacked);
        radioCoopUnstacked.setText("Unstacked");

        buttonGroupCoop.add(radioCoopStacked);
        radioCoopStacked.setText("Stacked");

        spinnerMaxCoopStack.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinnerMaxCoopStackStateChanged(evt);
            }
        });
        spinnerMaxCoopStack.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                spinnerMaxCoopStackPropertyChange(evt);
            }
        });

        labeCoopMaxStackHeight.setText("Max Stack Height:");

        javax.swing.GroupLayout panelCoopLayout = new javax.swing.GroupLayout(panelCoop);
        panelCoop.setLayout(panelCoopLayout);
        panelCoopLayout.setHorizontalGroup(
            panelCoopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCoopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCoopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCoopLayout.createSequentialGroup()
                        .addComponent(radioCoopUnstacked)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labeCoopMaxStackHeight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerMaxCoopStack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelCoopLayout.createSequentialGroup()
                        .addGroup(panelCoopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioCoopNone)
                            .addComponent(radioCoopStacked))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelCoopLayout.setVerticalGroup(
            panelCoopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCoopLayout.createSequentialGroup()
                .addComponent(radioCoopNone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCoopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioCoopUnstacked)
                    .addComponent(spinnerMaxCoopStack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labeCoopMaxStackHeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioCoopStacked))
        );

        panelHumanPlayer.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Human Player Noodle Throwing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        buttonGroupHumanPlayer.add(radioHPPoor);
        radioHPPoor.setSelected(true);
        radioHPPoor.setText("Poor (0 scored noodles per match)");
        radioHPPoor.setEnabled(false);

        buttonGroupHumanPlayer.add(radioHPMediocre);
        radioHPMediocre.setText("Mediocre (1 to 2 scored noodles per match)");
        radioHPMediocre.setToolTipText("");
        radioHPMediocre.setEnabled(false);

        buttonGroupHumanPlayer.add(radioHPExcellent);
        radioHPExcellent.setText("Excellent (3+ scored noodles per match)");
        radioHPExcellent.setActionCommand("Excellent");
        radioHPExcellent.setEnabled(false);

        checkBoxHPThrewNoodles.setText("HP Throws Noodles");
        checkBoxHPThrewNoodles.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                checkBoxHPThrewNoodlesStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelHumanPlayerLayout = new javax.swing.GroupLayout(panelHumanPlayer);
        panelHumanPlayer.setLayout(panelHumanPlayerLayout);
        panelHumanPlayerLayout.setHorizontalGroup(
            panelHumanPlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHumanPlayerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(checkBoxHPThrewNoodles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelHumanPlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioHPPoor)
                    .addComponent(radioHPMediocre)
                    .addComponent(radioHPExcellent)))
        );
        panelHumanPlayerLayout.setVerticalGroup(
            panelHumanPlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHumanPlayerLayout.createSequentialGroup()
                .addComponent(radioHPPoor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelHumanPlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioHPMediocre)
                    .addComponent(checkBoxHPThrewNoodles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioHPExcellent))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelScoring, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addComponent(panelCoop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelHumanPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(labelTitle)
                        .addGap(588, 588, 588)
                        .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelTeamInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRobotConfig, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTitle)
                    .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTeamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelRobotConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelScoring, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelCoop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelHumanPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        mainPanelScroll.setViewportView(mainPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanelScroll)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanelScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        mainPanelScroll.getVerticalScrollBar().setUnitIncrement(SCROLL_SPEED);

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void spinnerNumTotesPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_spinnerNumTotesPropertyChange
    {//GEN-HEADEREND:event_spinnerNumTotesPropertyChange

    }//GEN-LAST:event_spinnerNumTotesPropertyChange

    private void spinnerNumTotesStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinnerNumTotesStateChanged
    {//GEN-HEADEREND:event_spinnerNumTotesStateChanged
        int value = (Integer) spinnerNumTotes.getValue();
        int newValue = value;

        //clamp value
        if (value < 0)
        {
            newValue = 0;
        }
        else if (value > 3)
        {
            newValue = 3;
        }
        //set clamped value
        spinnerNumTotes.setValue(newValue);

        //allow for enabling/disabling of stack check
        checkBoxTotesStacked.setEnabled((newValue > 1));
        //removes checkmark if disabled
        checkBoxTotesStacked.setSelected((newValue > 1) ? checkBoxTotesStacked.isSelected() : false);

    }//GEN-LAST:event_spinnerNumTotesStateChanged

    private void spinnerNumContainersStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinnerNumContainersStateChanged
    {//GEN-HEADEREND:event_spinnerNumContainersStateChanged
        int value = (Integer) spinnerNumContainers.getValue();
        int newValue = value;

        //clamp value
        if (value < 0)
        {
            newValue = 0;
        }
        else if (value > 3)
        {
            newValue = 3;
        }
        //set clamped value
        spinnerNumContainers.setValue(newValue);
    }//GEN-LAST:event_spinnerNumContainersStateChanged

    private void checkBoxHPThrewNoodlesStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_checkBoxHPThrewNoodlesStateChanged
    {//GEN-HEADEREND:event_checkBoxHPThrewNoodlesStateChanged
        boolean threw = checkBoxHPThrewNoodles.isSelected();
        radioHPPoor.setEnabled(threw);
        radioHPMediocre.setEnabled(threw);
        radioHPExcellent.setEnabled(threw);
        if (!threw)
        {
            buttonGroupHumanPlayer.clearSelection();
        }
    }//GEN-LAST:event_checkBoxHPThrewNoodlesStateChanged

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonSaveActionPerformed
    {//GEN-HEADEREND:event_buttonSaveActionPerformed

        if (assessCompletion(true))
        {
            ActiveData activeData = scrapeData();
            Main.matchManager.addActive(activeData);
            //requests user input to reset the frame
            if (Utils.showOKCancelAndGetResponse("Reset frame?", "Reset the match frame?"))
            {
                this.resetFrame();
            }
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void fieldTeamNumKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_fieldTeamNumKeyReleased
    {//GEN-HEADEREND:event_fieldTeamNumKeyReleased
        fieldTeamNum.setText(utils.Utils.removeNonNumericChars(fieldTeamNum.getText()));
    }//GEN-LAST:event_fieldTeamNumKeyReleased

    private void spinnerMaxNumTotesStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinnerMaxNumTotesStateChanged
    {//GEN-HEADEREND:event_spinnerMaxNumTotesStateChanged
        int val = (Integer) spinnerMaxNumTotes.getValue();
        if (val > 6)
        {
            val = 6;
        }
        else if (val < 0)
        {
            val = 0;
        }
        spinnerMaxNumTotes.setValue(val);
    }//GEN-LAST:event_spinnerMaxNumTotesStateChanged

    private void spinnerMaxNumTotesPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_spinnerMaxNumTotesPropertyChange
    {//GEN-HEADEREND:event_spinnerMaxNumTotesPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_spinnerMaxNumTotesPropertyChange

    private void spinnerMaxHeightContainerStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinnerMaxHeightContainerStateChanged
    {//GEN-HEADEREND:event_spinnerMaxHeightContainerStateChanged

        int val = (Integer) spinnerMaxHeightContainer.getValue();
        if (val > 6)
        {
            val = 6;
        }
        else if (val < 0)
        {
            val = 0;
        }
        spinnerMaxHeightContainer.setValue(val);
    }//GEN-LAST:event_spinnerMaxHeightContainerStateChanged

    private void spinnerMaxHeightContainerPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_spinnerMaxHeightContainerPropertyChange
    {//GEN-HEADEREND:event_spinnerMaxHeightContainerPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_spinnerMaxHeightContainerPropertyChange

    private void spinnerMaxCoopStackStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinnerMaxCoopStackStateChanged
    {//GEN-HEADEREND:event_spinnerMaxCoopStackStateChanged
        int value = (Integer)spinnerMaxCoopStack.getValue();
        if(value > 4)
        {
            value = 4;
        }
        else if( value < 0)
        {
            value = 0;
        }
        spinnerMaxCoopStack.setValue(value);
    }//GEN-LAST:event_spinnerMaxCoopStackStateChanged

    private void spinnerMaxCoopStackPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_spinnerMaxCoopStackPropertyChange
    {//GEN-HEADEREND:event_spinnerMaxCoopStackPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_spinnerMaxCoopStackPropertyChange

    private void checkBoxTeleopTotesCanPickupActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkBoxTeleopTotesCanPickupActionPerformed
    {//GEN-HEADEREND:event_checkBoxTeleopTotesCanPickupActionPerformed
        comboBoxTeleopTotePickupOrientation.setEnabled(!comboBoxTeleopTotePickupOrientation.isEnabled());
        spinnerMaxNumTotes.setEnabled(!spinnerMaxNumTotes.isEnabled());
        spinnerMaxNumTotes.setValue(0);
        comboBoxTeleopToteFeedLocation.setEnabled(!comboBoxTeleopToteFeedLocation.isEnabled());
    }//GEN-LAST:event_checkBoxTeleopTotesCanPickupActionPerformed

    private void checkBoxTeleopContainersPickupActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkBoxTeleopContainersPickupActionPerformed
    {//GEN-HEADEREND:event_checkBoxTeleopContainersPickupActionPerformed
        checkBoxTeleopContainersUpright.setEnabled(!checkBoxTeleopContainersUpright.isEnabled());
        checkBoxTeleopContainersUpright.setSelected(false);
        spinnerMaxHeightContainer.setEnabled(!spinnerMaxHeightContainer.isEnabled());
        spinnerMaxHeightContainer.setValue(0);
    }//GEN-LAST:event_checkBoxTeleopContainersPickupActionPerformed

    /**
     * Pulls all data from the form and sticks it in a match data object.
     *
     * @return
     */
    private ActiveData scrapeData()
    {
        //GET HP data            
        HumanPlayerType hpType = HumanPlayerType.NO_THROW;
        if (checkBoxHPThrewNoodles.isSelected())
        {
            try
            {
                hpType = HumanPlayerType.valueOf(getSelectedButtonActionCommandOrDefault(buttonGroupHumanPlayer, HumanPlayerType.NO_THROW.toString()));
            }
            catch (Exception ex)
            {
                hpType = HumanPlayerType.NO_THROW;
            }
        }

        //GET COOP data   
        CoOpType coopType;
        try
        {
            coopType = CoOpType.valueOf(getSelectedButtonActionCommandOrDefault(buttonGroupCoop, CoOpType.NONE.toString()));
        }
        catch (Exception ex)
        {
            coopType = CoOpType.NONE;
        }

        //GET Scouter data
        int teamNum = Integer.valueOf(fieldTeamNum.getText());
        String scouter = fieldScouter.getText();

        //GET Robot Shape                
        RobotShape robotShape = RobotShape.valueOf(comboBoxRobotShape.getSelectedItem().toString().toUpperCase());

        //GET NUM Robot wheels
        RobotNumWheels robotNumWheels = RobotNumWheels.valueOf("WHEEL_" + comboBoxRobotDriveTrain.getSelectedItem().toString().toUpperCase().replaceAll(" ", "_"));

        //GET Robot Wheel type
        RobotWheelType robotWheelType = RobotWheelType.valueOf(comboBoxRobotWheelType.getSelectedItem().toString().toUpperCase());

        //GET Robot cnfig comments
        String robotComments = textAreaRobotConfigComments.getText();
        
        //GET totes data
        boolean canGetTotes = checkBoxTeleopTotesCanPickup.isSelected();
        TotePickupOrientation totePickupOrientation = TotePickupOrientation.NONE;
        if(canGetTotes)
        {
            totePickupOrientation = TotePickupOrientation.valueOf(comboBoxTeleopTotePickupOrientation.getSelectedItem().toString());
        }
        int toteMaxStackHeight = (Integer) spinnerMaxNumTotes.getValue();
        FeedLocation feedLocation = FeedLocation.valueOf(comboBoxTeleopToteFeedLocation.getSelectedItem().toString().toUpperCase().replaceAll(" ", "_"));
        
        //GET container data
        boolean canGetContainers = checkBoxTeleopContainersPickup.isSelected();
        boolean containersMustBeUpright = checkBoxTeleopContainersUpright.isSelected();
        int maxCappableStackHeight = (Integer)spinnerMaxHeightContainer.getValue();
        
        //GET Litter info
        boolean canPushLitter = checkBoxTeleopLitterPushLitter.isSelected();
        boolean canPickupLitter = checkBoxTeleopLitterPickupLitter.isSelected();        

        //GET Auto data
        int autoNumContainers = (int) spinnerNumContainers.getValue();
        int autoNumTotes = (int) spinnerNumTotes.getValue();
        boolean autoTotesStacked = checkBoxTotesStacked.isSelected();
        boolean autoInAutoZone = checkBoxInAutoZone.isSelected();
        
        return new ActiveData(teamNum, scouter, robotShape, robotNumWheels, robotWheelType, robotComments, autoNumTotes, autoNumContainers, autoTotesStacked, autoInAutoZone, canGetTotes, totePickupOrientation, toteMaxStackHeight, feedLocation, canGetContainers, containersMustBeUpright, maxCappableStackHeight, canPushLitter, canPickupLitter, coopType, hpType);
        
    }

    /**
     * Checks to see if all fields are completed
     *
     * @return passed - if passed completion inspection
     */
    private boolean assessCompletion(boolean reportErrors)
    {
        boolean passed = true;

        //scouter info complete
        if (fieldTeamNum.getText().equals("") || fieldScouter.getText().equals(""))
        {
            if (reportErrors)
            {
                Utils.showErrorBox("Scouter section not filled out!");
            }
            passed = false;
        }
        //coop unfilled out
        else if (!radioCoopNone.isSelected() && !radioCoopStacked.isSelected() && !radioCoopUnstacked.isSelected())
        {
            if (reportErrors)
            {
                Utils.showErrorBox("Coop section not filled out!");
            }
            passed = false;
        }
        //HP throws but radio unselected
        else if (checkBoxHPThrewNoodles.isSelected() && !radioHPPoor.isSelected() && !radioHPMediocre.isSelected() && !radioHPExcellent.isSelected())
        {
            if (reportErrors)
            {
                Utils.showErrorBox("Human Player section not filled out!");
            }
            passed = false;
        }
        return passed;
    }

    /**
     * Gets the AbstractButton's action command for the selected button, or
     * returns the default value if none selected
     *
     * @param buttonGroup
     * @return
     */
    public String getSelectedButtonActionCommandOrDefault(ButtonGroup buttonGroup, String defaultValue)
    {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();)
        {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected())
            {
                return button.getActionCommand().toUpperCase();
            }
        }

        return defaultValue;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ActiveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ActiveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ActiveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ActiveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ActiveFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupCoop;
    private javax.swing.ButtonGroup buttonGroupHumanPlayer;
    private javax.swing.JButton buttonSave;
    private javax.swing.JCheckBox checkBoxHPThrewNoodles;
    private javax.swing.JCheckBox checkBoxInAutoZone;
    private javax.swing.JCheckBox checkBoxTeleopContainersPickup;
    private javax.swing.JCheckBox checkBoxTeleopContainersUpright;
    private javax.swing.JCheckBox checkBoxTeleopLitterPickupLitter;
    private javax.swing.JCheckBox checkBoxTeleopLitterPushLitter;
    private javax.swing.JCheckBox checkBoxTeleopTotesCanPickup;
    private javax.swing.JCheckBox checkBoxTotesStacked;
    private javax.swing.JComboBox comboBoxRobotDriveTrain;
    private javax.swing.JComboBox comboBoxRobotShape;
    private javax.swing.JComboBox comboBoxRobotWheelType;
    private javax.swing.JComboBox comboBoxTeleopToteFeedLocation;
    private javax.swing.JComboBox comboBoxTeleopTotePickupOrientation;
    private javax.swing.JTextField fieldScouter;
    private javax.swing.JTextField fieldTeamNum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labeCoopMaxStackHeight;
    private javax.swing.JLabel labelFeedLocation;
    private javax.swing.JLabel labelNumContainers;
    private javax.swing.JLabel labelNumTotes;
    private javax.swing.JLabel labelPickupOrintation;
    private javax.swing.JLabel labelScouter;
    private javax.swing.JLabel labelTeamNum;
    private javax.swing.JLabel labelTeleopContainersMaxHeight;
    private javax.swing.JLabel labelTeleopTotesMaxHeight;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainPanelScroll;
    private javax.swing.JPanel panelAutoScoredContainer;
    private javax.swing.JPanel panelAutoScoredRobot;
    private javax.swing.JPanel panelAutoScoredTotes;
    private javax.swing.JPanel panelAutonomous;
    private javax.swing.JPanel panelCoop;
    private javax.swing.JPanel panelHumanPlayer;
    private javax.swing.JPanel panelRobotActivityComments;
    private javax.swing.JPanel panelRobotConfig;
    private javax.swing.JPanel panelRobotDriveTrain;
    private javax.swing.JPanel panelRobotShape;
    private javax.swing.JPanel panelRobotWheelType;
    private javax.swing.JPanel panelScoring;
    private javax.swing.JPanel panelTeamInfo;
    private javax.swing.JPanel panelTeleop;
    private javax.swing.JPanel panelTeleopContainer;
    private javax.swing.JPanel panelTeleopLitter;
    private javax.swing.JPanel panelTeleopTotes;
    private javax.swing.JRadioButton radioCoopNone;
    private javax.swing.JRadioButton radioCoopStacked;
    private javax.swing.JRadioButton radioCoopUnstacked;
    private javax.swing.JRadioButton radioHPExcellent;
    private javax.swing.JRadioButton radioHPMediocre;
    private javax.swing.JRadioButton radioHPPoor;
    private javax.swing.JSpinner spinnerMaxCoopStack;
    private javax.swing.JSpinner spinnerMaxHeightContainer;
    private javax.swing.JSpinner spinnerMaxNumTotes;
    private javax.swing.JSpinner spinnerNumContainers;
    private javax.swing.JSpinner spinnerNumTotes;
    private javax.swing.JTextArea textAreaRobotConfigComments;
    // End of variables declaration//GEN-END:variables
}
