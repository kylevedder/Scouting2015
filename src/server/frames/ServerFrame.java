/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server.frames;

import client.frames.MatchFrame;
import client.objects.activedata.ActiveData;
import client.objects.matchdata.MatchData;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.TableRowSorter;
import main.Globals;
import main.Main;
import server.filemanager.ServerFileManager;
import server.networking.SyncFilesServerThread;

/**
 *
 * @author kyle
 */
public class ServerFrame extends javax.swing.JFrame
{

    private SyncFilesServerThread syncFilesServerThread = null;

    private ServerFileManager serverFileManager = ServerFileManager.getInstance();
    public MatchViewerFrame matchViewerFrame = new MatchViewerFrame(null);
    public ActiveViewerFrame activeViewerFrame = new ActiveViewerFrame(null);

    /**
     * Creates new form ServerFrame
     */
    public ServerFrame()
    {
        initComponents();
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
            this.setLocationRelativeTo(null);
            this.pack();
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex)
        {
            Logger.getLogger(MatchFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        populateTables();
    }

    /**
     * Pulls all data from the server saves files and populates the tables.
     */
    public void populateTables()
    {
        setupActiveTable();
        setupMatchTable();
        this.matchViewerFrame.setVisible(false);

    }

    /**
     * Sets up the params of the table for display.
     */
    private void setupMatchTable()
    {

        ArrayList<File> matchFiles = this.serverFileManager.getMatchFiles();
        this.tableMatch.setModel(new MatchTableModel(matchFiles));
        TableRowSorter mySorter = new TableRowSorter(tableMatch.getModel());
        mySorter.setComparator(0, new NumericComparator());
        mySorter.setComparator(1, new NumericComparator());
        mySorter.setComparator(2, new StringComparator());
        mySorter.setComparator(3, new NumericComparator());
        mySorter.setComparator(4, new StringComparator());
        tableMatch.setRowSorter(mySorter);
        tableMatch.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseClicked(MouseEvent e)
            {
                if (e.getClickCount() == 1)
                {                    
                    String fileName = (String) tableMatch.getValueAt(tableMatch.getSelectedRow(), 4);
                    System.out.println("File: " + fileName);
                    String fileContents = serverFileManager.readFile(fileName);
                    MatchData matchData = MatchData.deserialize(fileContents);
                    matchViewerFrame.setVisible(true);
                    matchViewerFrame.resetFrame(matchData);
                }
            }
        });
    }

    /**
     * Sets up the params of the table for display.
     */
    private void setupActiveTable()
    {
        ArrayList<File> activeFiles = this.serverFileManager.getActiveFiles();
        this.tableActive.setModel(new ActiveTableModel(activeFiles));
        TableRowSorter mySorter = new TableRowSorter(tableActive.getModel());
        mySorter.setComparator(0, new NumericComparator());
        mySorter.setComparator(1, new StringComparator());
        mySorter.setComparator(2, new StringComparator());
        tableActive.setRowSorter(mySorter);
        tableActive.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseClicked(MouseEvent e)
            {
                if (e.getClickCount() == 1)
                {                                        
                    String fileName = (String) tableActive.getValueAt(tableActive.getSelectedRow(), 2);
                    System.out.println("File: " + fileName);
                    String fileContents = serverFileManager.readFile(fileName);
                    ActiveData activeData = ActiveData.deserialize(fileContents);
                    activeViewerFrame.setVisible(true);
                    activeViewerFrame.resetFrame(activeData);
                }
            }
        });        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelMainPanel = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMatch = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableActive = new javax.swing.JTable();

        setTitle("Team 467 Scouting Server");

        labelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelTitle.setText("Scouting Server");

        tableMatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMatch.setMinimumSize(new java.awt.Dimension(300, 72));
        jScrollPane1.setViewportView(tableMatch);

        tabbedPane.addTab("Match", jScrollPane1);

        tableActive.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableActive);

        tabbedPane.addTab("Active", jScrollPane2);

        jScrollPane3.setViewportView(tabbedPane);

        javax.swing.GroupLayout panelMainPanelLayout = new javax.swing.GroupLayout(panelMainPanel);
        panelMainPanel.setLayout(panelMainPanelLayout);
        panelMainPanelLayout.setHorizontalGroup(
            panelMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addContainerGap(260, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        panelMainPanelLayout.setVerticalGroup(
            panelMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelMainPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tableActive;
    private javax.swing.JTable tableMatch;
    // End of variables declaration//GEN-END:variables
    @Override
    public void setVisible(boolean b)
    {
        super.setVisible(b);

        if (b)
        {
            if (this.syncFilesServerThread == null)
            {
                System.out.println("Starting server...");
                syncFilesServerThread = new SyncFilesServerThread(Globals.PORT);
                syncFilesServerThread.start();
                Main.main.setMenuStartServerText(Globals.STOP_SERVER_STRING);
            }
        }
        else
        {
            if (syncFilesServerThread != null)
            {
                System.out.println("Killing server...");
                syncFilesServerThread.kill();
                syncFilesServerThread = null;
                Main.main.setMenuStartServerText(Globals.START_SERVER_STRING);
            }
        }
    }
}
